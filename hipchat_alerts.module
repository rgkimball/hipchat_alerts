<?php
/**
 * @file
 * Basic connectivity and functions.
 * @author rgkimball/gabesullice
 * @package hipchat_alerts
 * @version 1.0.0
 */

// Eventually this will change based on which version of the API you're using.
define('HIPCHAT_ALERTS_API_VERSION', 0);
define('HIPCHAT_ALERTS_API_ENDPOINT', 'https://api.hipchat.com');

/**
 * Implements hook_menu().
 * Defines menu items for admin interface.
 *
 * @return mixed
 */
function hipchat_alerts_menu() {

  $items['admin/config/development/hipchat-alerts'] = array(
    'title' => 'HipChat Alerts',
    'description' => 'HipChat Alerts Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hipchat_alerts_config_form'),
    'access arguments' => array('administer hipchat alerts'),
    'file' => 'hipchat_alerts.admin.inc',
  );

  $items['admin/config/development/hipchat-alerts/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure API & Room settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/development/hipchat-alerts/info'] = array(
    'title' => 'Group Info',
    'description' => 'Provides a list of rooms and users for current configuration.',
    'page callback' => 'hipchat_alerts_config_info',
    'page arguments' => array(HIPCHAT_ALERTS_API_VERSION,
      variable_get('hipchat_alerts_v1_api_token', ''),
      variable_get('hipchat_alerts_room_id', '')),
    'access arguments' => array('administer hipchat alerts'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hipchat_alerts.admin.inc',
  );

  $items['admin/config/development/hipchat-alerts/sandbox'] = array(
    'title' => 'Sandbox',
    'description' => 'Sandbox page for testing messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hipchat_alerts_config_sandbox_form'),
    'access arguments' => array('administer hipchat alerts'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hipchat_alerts.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 * Module admin access
 *
 * @return mixed
 */
function hipchat_alerts_permission() {
  return array(
    'administer hipchat alerts' => array(
      'title' => t('Access HipChat Alerts admin'),
      'description' => t('Change API keys and alert settings for HipChat'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function hipchat_alerts_libraries_info() {
  $library['hipchat-php'] = array(
    'name' => 'hipchat-php',
    'vendor url' => 'https://github.com/hipchat/hipchat-php',
    'download url' => 'https://github.com/hipchat/hipchat-php',
    'path' => 'src/HipChat',
    'version callback' => 'hipchat_alerts_version_callback',
    'files' => array(
      'php' => array(
        'HipChat.php',
      ),
    ),
  );

  return $library;
}

/**
 * Implements hook_watchdog().
 * Evaluates every watchdog log message and routes a message if necessary.
 *
 * @param array $log_entry
 */
function hipchat_alerts_watchdog($log_entry) {
  $minimum = variable_get('hipchat_alerts_watchdog_severity', WATCHDOG_ERROR);

  if ($minimum != NULL && $log_entry['severity'] <= $minimum) {
    // Can't pass null as second variable of t().
    (isset($log_entry['variables'])) ?
      $vars = $log_entry['variables'] : $vars = array();

    // Convert severity to human speak.
    $severity = array('emergency', 'alert', 'critical', 'error', 'warning',
      'notice', 'info', 'debug');

    $vars = $vars +
      array(
        '@type'     => $log_entry['type'],
        '@severity' => $severity[$log_entry['severity']],
        '@message'  => $log_entry['message'],
        '@url'      => $GLOBALS['base_url']
      );

    hipchat_alerts_message(t('[@url] @type (@severity): @message', $vars),
      variable_get('site_name', 'Drupal'));
  }

}

/**
 * Implements version callback for hook_libraries_info().
 * Since hipchat-php doesn't have a version number specified in any files we
 * have to hijack the callback and just provide TRUE.
 *
 * @return bool
 */
function hipchat_alerts_version_callback() {
  return TRUE;
}

/**
 * Messaging handler.
 *
 * @param $sender
 * @param $message
 * @return bool
 */
function hipchat_alerts_message($message, $sender = 'Drupal') {
  $room = variable_get('hipchat_alerts_room_id', '');
  $success = FALSE;

  if (($library = libraries_load('hipchat-php')) && $library['loaded']) {
    $token = variable_get('hipchat_alerts_v1_api_token');
    $target = HIPCHAT_ALERTS_API_ENDPOINT;
    $hc = new HipChat\HipChat($token, $target);

    if (strlen($sender) >= 15) {
      /**
       * HC only allows author names to be 15 characters, so if our message
       * exceeds that, we'll add the sender's name to the message instead
       * In most cases, this is either 'Drupal' or site_name
       */
      $msg = $message;
      $message = $sender . ": " . $msg;
      $sender = substr($sender, 0, 15);
    }

    if (variable_get('hipchat_alerts_site_environment') != 1) {
      try {
        $hc->message_room($room, $sender, $message);
        $success = TRUE;
      }
      catch (Exception $e) {
        drupal_set_message(t('Error sending HipChat message: @message'),
          array('@message' => $e->getMessage()));
        $success = FALSE;
      }
    }
    else {
      drupal_set_message(
        t('Error sending HipChat message: Development environment enabled'));
    }
  }
  else {
    watchdog('hipchat-alerts',
      'An error loading the hipchat-php library occurred.',
      array(), WATCHDOG_ERROR);
  }

  return $success;
}

/**
 * Build user table
 * @param $room
 * @return mixed
 */
function hipchat_alerts_users_table($room) {

  if (($library = libraries_load('hipchat-php')) && $library['loaded']) {
    $token = variable_get('hipchat_alerts_v1_api_token');
    $target = HIPCHAT_ALERTS_API_ENDPOINT;
    $hc = new HipChat\HipChat($token, $target);

    $content = '';
    $rows = array();

    try {
      $users = $hc->get_users();
      $header = array('', 'User ID', 'Username', 'Email',
        'Status', 'Last Active', 'Timezone');

      foreach ($users as $user) {
        $photo = '<img src="' . $user->photo_url .
          '" height="125" width="125" alt="' . $user->name . '" />';

        if (date('Y', time()) == date('Y', $user->last_active)) {
          $last_active = date('F j, g:i:s', $user->last_active);
        }
        else {
          $last_active = date('F j, Y, g:i:s', $user->last_active);
        }

        if ($user->is_group_admin == 1) {
          $username = '@<strong>' . $user->mention_name .
            '</strong><br />' . $user->title;
        }
        else {
          $username = '@' . $user->mention_name . '<br />' . $user->title;
        }

        $rows[] = array($photo, $user->user_id, $username, $user->email,
          $user->status, $last_active, $user->timezone);

      }
    }
    catch (HipChat\hipchat_alerts_Exception $e) {
      $content .= "Oops! Error: " . $e->getMessage();
    }

    $output = theme('table', array('header' => $header, 'rows' => $rows));

    return $output;
  }
  else {
    watchdog('hipchat-alerts',
      'An error loading the hipchat-php library occurred.',
      array(), WATCHDOG_ERROR);
  }
}
